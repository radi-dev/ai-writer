// Navigation functionality
function initializeNavigation() {
  const navItems = document.querySelectorAll(".nav-item");
  const pages = document.querySelectorAll(".page-content");
  const sidebarToggle = document.getElementById("sidebar-toggle");
  const sidebar = document.getElementById("sidebar");

  // Handle navigation clicks

  navItems.forEach((item) => {
    const targetPage = item.dataset.page + "-page";
    const currentPage = document.getElementById(targetPage);
    if (currentPage) {
      // Add active class to clicked item
      item.classList.remove(
        "text-gray-600",
        "hover:bg-gray-50",
        "hover:text-gray-900"
      );
      item.classList.add(
        "bg-blue-50",
        "text-blue-700",
        "border-r-2",
        "border-blue-600"
      );

      console.log("targetPage", targetPage);

      // Close sidebar on mobile
      if (window.innerWidth < 1024) {
        sidebar.classList.remove("open");
      }
    }
  });

  // Handle sidebar toggle
  if (sidebarToggle) {
    console.log("sidebarToggle", sidebarToggle);
    sidebarToggle.addEventListener("click", () => {
      console.log("sidebarToggle clicked");
      sidebar.classList.toggle("open");
    });
  }

  // Close sidebar when clicking outside on mobile
  document.addEventListener("click", (e) => {
    if (
      window.innerWidth < 1024 &&
      !sidebar.contains(e.target) &&
      !sidebarToggle.contains(e.target)
    ) {
      sidebar.classList.remove("open");
    }
  });
}

// Content Generator functionality
function initializeContentGenerator() {
  const generateBtn = document.getElementById("generate-btn");
  const topicInput = document.getElementById("topic-input");
  const contentType = document.getElementById("content-type");
  const tone = document.getElementById("tone");
  const audience = document.getElementById("audience");
  const keywords = document.getElementById("keywords");
  const lengthSlider = document.getElementById("length-slider");
  const lengthValue = document.getElementById("length-value");
  const previewContent = document.getElementById("preview-content");
  const wordCount = document.getElementById("word-count");
  const charCount = document.getElementById("char-count");

  // Update length display
  lengthSlider.addEventListener("input", () => {
    lengthValue.textContent = lengthSlider.value;
  });

  // Generate content
  generateBtn.addEventListener("click", () => {
    const topic = topicInput.value.trim();

    if (!topic) {
      alert("Please enter a topic for your content.");
      return;
    }

    // Show loading state
    generateBtn.innerHTML =
      '<i class="fas fa-spinner fa-spin mr-2"></i>Generating...';
    generateBtn.disabled = true;

    // Simulate AI generation
    setTimeout(() => {
      const sampleContent = `üöÄ ${topic}

This is a sample generated LinkedIn post about ${topic.toLowerCase()}. In a real implementation, this would be generated by AI based on your specifications:

‚Ä¢ Tone: ${tone.value}
‚Ä¢ Target audience: ${audience.value || "General audience"}
‚Ä¢ Length: ~${lengthSlider.value} words

${keywords.value ? `Keywords included: ${keywords.value}` : ""}

#LinkedIn #ContentCreation #AI #Marketing

What are your thoughts on this topic? Let me know in the comments! üëá`;

      // Create LinkedIn post preview
      const linkedinPreview = `
        <div class="linkedin-post">
          <div class="linkedin-post-header">
            <div class="flex items-center space-x-3">
              <div class="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center">
                <span class="text-gray-600 font-medium">CW</span>
              </div>
              <div>
                <h3 class="font-semibold text-gray-900">Content Writer</h3>
                <p class="text-sm text-gray-500">Marketing Professional ‚Ä¢ 2nd</p>
                <p class="text-xs text-gray-400">2h ‚Ä¢ üåç</p>
              </div>
              <div class="ml-auto">
                <button class="p-2 hover:bg-gray-100 rounded">
                  <i class="fas fa-ellipsis-h text-gray-400"></i>
                </button>
              </div>
            </div>
          </div>
          <div class="linkedin-post-content h-96 overflow-y-auto">
            ${sampleContent}
          </div>
          <div class="linkedin-post-actions">
            <div class="flex items-center text-sm text-gray-500 mb-3">
              <span>üëç 42 likes</span>
              <span class="ml-auto">8 comments ‚Ä¢ 3 reposts</span>
            </div>
            <div class="flex items-center justify-between w-full">
              <div class="linkedin-post-action">
                <i class="fas fa-thumbs-up"></i>
                <span>Like</span>
              </div>
              <div class="linkedin-post-action">
                <i class="fas fa-comment"></i>
                <span>Comment</span>
              </div>
              <div class="linkedin-post-action">
                <i class="fas fa-share"></i>
                <span>Share</span>
              </div>
              <div class="linkedin-post-action">
                <i class="fas fa-paper-plane"></i>
                <span>Send</span>
              </div>
            </div>
          </div>
        </div>
      `;

      previewContent.innerHTML = linkedinPreview;

      // Update stats
      const words = sampleContent.trim().split(/\s+/).length;
      const chars = sampleContent.length;
      wordCount.textContent = words;
      charCount.textContent = chars;

      generateBtn.innerHTML =
        '<i class="fas fa-magic-wand-sparkles mr-2"></i>Generate Content';
      generateBtn.disabled = false;

      // Show success message
      showToast("Content generated successfully!", "success");
    }, 2000);
  });
}

// AI Assistant functionality
function initializeAIAssistant() {
  const chatInput = document.getElementById("chat-input");
  const sendButton = document.getElementById("send-message");
  const chatMessages = document.getElementById("chat-messages");

  function sendMessage() {
    const message = chatInput.value.trim();
    if (!message) return;

    // Add user message
    const userMessage = document.createElement("div");
    userMessage.className = "flex items-start space-x-3 justify-end";
    userMessage.innerHTML = `
      <div class="bg-blue-600 text-white rounded-lg p-3 max-w-xs">
        <p class="text-sm">${message}</p>
      </div>
      <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
        <span class="text-gray-600 text-sm font-medium">U</span>
      </div>
    `;
    chatMessages.appendChild(userMessage);

    // Clear input
    chatInput.value = "";

    // Simulate AI response
    setTimeout(() => {
      const aiMessage = document.createElement("div");
      aiMessage.className = "flex items-start space-x-3";
      aiMessage.innerHTML = `
        <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
          <i class="fas fa-robot text-blue-600"></i>
        </div>
        <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
          <p class="text-sm">That's a great question! Here are some suggestions for your content...</p>
        </div>
      `;
      chatMessages.appendChild(aiMessage);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 1000);
  }

  if (sendButton) {
    sendButton.addEventListener("click", sendMessage);
  }

  if (chatInput) {
    chatInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        sendMessage();
      }
    });
  }
}

// Toast notification system
function showToast(message, type = "info") {
  const toast = document.createElement("div");
  toast.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 transition-all duration-300 ${
    type === "success"
      ? "bg-green-500 text-white"
      : type === "error"
      ? "bg-red-500 text-white"
      : "bg-blue-500 text-white"
  }`;
  toast.textContent = message;

  document.body.appendChild(toast);

  setTimeout(() => {
    toast.style.opacity = "0";
    toast.style.transform = "translateX(100%)";
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 300);
  }, 3000);
}

// Copy functionality
function initializeCopyFunctionality() {
  const copyButtons = document.querySelectorAll("[data-copy]");

  copyButtons.forEach((button) => {
    button.addEventListener("click", async () => {
      const textToCopy = button.dataset.copy;

      try {
        await navigator.clipboard.writeText(textToCopy);
        showToast("Content copied to clipboard!", "success");
      } catch (err) {
        showToast("Failed to copy content", "error");
      }
    });
  });
}

// Initialize all functionality when DOM is loaded
document.addEventListener("DOMContentLoaded", () => {
  initializeNavigation();
  initializeContentGenerator();
  initializeAIAssistant();
  initializeCopyFunctionality();

  console.log("LinkCraft app initialized successfully!");
});

// Handle window resize
window.addEventListener("resize", () => {
  const sidebar = document.getElementById("sidebar");
  if (window.innerWidth >= 1024) {
    sidebar.classList.remove("open");
  }
});
